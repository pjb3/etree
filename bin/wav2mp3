#!/usr/bin/env ruby
require "rubygems"
require "etree"
require "escape"

info_file = Etree::InfoFile.new :info_file => ARGV[0]
info_file.parse

# If we are in test mode, just print what we would do
test_mode = false

puts "Band: #{info_file.band}"
puts "Date: #{info_file.date.strftime("%Y-%m-%d")}"
puts "Venue: #{info_file.venue}"
puts ""

out_dir = "#{info_file.directory}.mp3f"

Dir.mkdir(out_dir) unless File.exist?(out_dir)

total_track_count = info_file.tracks.size
wav_files = Dir["#{info_file.directory}/*.wav"]

unless total_track_count == wav_files.size
  puts "ERROR: Based on the info file, there are #{total_track_count} tracks, but there are #{wav_files.size}"
  exit 1
end

puts info_file.tracks

disc_count = info_file.discs.size
prev_disc = nil
track_count = 0
wav_files.each_with_index do |wav_file, i|
  track = info_file.tracks[i]

  if prev_disc == track.disc
    track_count += 1
  else
    track_count = 1
    prev_disc = track.disc
  end

  lame_cmd = Escape.shell_command(["lame",
    "-b", "128",
    "-q", "7",
    "--ta", info_file.band,
    "--tl", "#{info_file.date.strftime("%Y-%m-%d")} #{info_file.venue}",
    "--tt", track.name,
    "--tc", info_file.source.join("\n"),
    "--ty", info_file.date.year.to_s,
    "--tn", "#{track.number}/#{track_count}",
    "--tv", "TPOS=#{track.disc}/#{disc_count}",
    wav_file,
    File.join(out_dir, "#{track.file_name.sub(/\.wav$/,'')}.mp3")])

  cmd = lame_cmd

  if test_mode
    puts cmd
  else
    puts "Encoding #{track.name}..."
    unless system(cmd)
      raise "Error while trying to encode #{wav_file}:#{$?}"
    end
  end
end
